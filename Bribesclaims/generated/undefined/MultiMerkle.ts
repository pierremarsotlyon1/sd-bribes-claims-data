// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get update(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class MerkleRootUpdated extends ethereum.Event {
  get params(): MerkleRootUpdated__Params {
    return new MerkleRootUpdated__Params(this);
  }
}

export class MerkleRootUpdated__Params {
  _event: MerkleRootUpdated;

  constructor(event: MerkleRootUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get merkleRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get update(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MultiMerkle extends ethereum.SmartContract {
  static bind(address: Address): MultiMerkle {
    return new MultiMerkle("MultiMerkle", address);
  }

  isClaimed(token: Address, index: BigInt): boolean {
    let result = super.call("isClaimed", "isClaimed(address,uint256):(bool)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBoolean();
  }

  try_isClaimed(token: Address, index: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isClaimed",
      "isClaimed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  merkleRoot(param0: Address): Bytes {
    let result = super.call("merkleRoot", "merkleRoot(address):(bytes32)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBytes();
  }

  try_merkleRoot(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("merkleRoot", "merkleRoot(address):(bytes32)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  update(param0: Address): BigInt {
    let result = super.call("update", "update(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_update(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("update", "update(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimMultiCall extends ethereum.Call {
  get inputs(): ClaimMultiCall__Inputs {
    return new ClaimMultiCall__Inputs(this);
  }

  get outputs(): ClaimMultiCall__Outputs {
    return new ClaimMultiCall__Outputs(this);
  }
}

export class ClaimMultiCall__Inputs {
  _call: ClaimMultiCall;

  constructor(call: ClaimMultiCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get claims(): Array<ClaimMultiCallClaimsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      ClaimMultiCallClaimsStruct
    >();
  }
}

export class ClaimMultiCall__Outputs {
  _call: ClaimMultiCall;

  constructor(call: ClaimMultiCall) {
    this._call = call;
  }
}

export class ClaimMultiCallClaimsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this[3].toBytesArray();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMerkleRootCall extends ethereum.Call {
  get inputs(): UpdateMerkleRootCall__Inputs {
    return new UpdateMerkleRootCall__Inputs(this);
  }

  get outputs(): UpdateMerkleRootCall__Outputs {
    return new UpdateMerkleRootCall__Outputs(this);
  }
}

export class UpdateMerkleRootCall__Inputs {
  _call: UpdateMerkleRootCall;

  constructor(call: UpdateMerkleRootCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _merkleRoot(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateMerkleRootCall__Outputs {
  _call: UpdateMerkleRootCall;

  constructor(call: UpdateMerkleRootCall) {
    this._call = call;
  }
}
