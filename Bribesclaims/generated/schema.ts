// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LastClaimed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LastClaimed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LastClaimed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LastClaimed", id.toString(), this);
    }
  }

  static load(id: string): LastClaimed | null {
    return changetype<LastClaimed | null>(store.get("LastClaimed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addresses(): Array<Bytes> {
    let value = this.get("addresses");
    return value!.toBytesArray();
  }

  set addresses(value: Array<Bytes>) {
    this.set("addresses", Value.fromBytesArray(value));
  }

  get updated(): BigInt {
    let value = this.get("updated");
    return value!.toBigInt();
  }

  set updated(value: BigInt) {
    this.set("updated", Value.fromBigInt(value));
  }

  get lastDistribution(): BigInt | null {
    let value = this.get("lastDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastDistribution(value: BigInt | null) {
    if (!value) {
      this.unset("lastDistribution");
    } else {
      this.set("lastDistribution", Value.fromBigInt(<BigInt>value));
    }
  }
}
